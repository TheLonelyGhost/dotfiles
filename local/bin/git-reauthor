#!/usr/bin/env bash
set -euo pipefail


init_variables() {
  COMMAND="${0#*-}"

  unset OLD_EMAIL
  unset CORRECT_EMAIL
  unset CORRECT_NAME
  TYPE='both'
}


usage() {
  cat << EOF
usage: git ${COMMAND} [<options>]

Options
    -e, --correct-email  <email>  define the correct email to set (default: value of \`git config user.email\`)
    -n, --correct-name   <name>   define the correct name to set (default: value of \`git config user.name\`)
    -o, --old-email      <email>  rewrite identities matching old email in commits and tags
    -t, --type           <id>     define the type of identities affected by the rewrite
                                  'author', 'committer', 'both' (default: 'both')
EOF
}


error() {
  if [ -n "${1:-}" ]; then
    printf 'error: %s\n' "$1" >&2
  fi
  usage
  exit 1
}


reauthor() {
  local author committer filter
  author='
    if [ "${GIT_AUTHOR_EMAIL}" = "${OLD_EMAIL}" ]; then
      [ -z "${CORRECT_EMAIL+x}" ] || export GIT_AUTHOR_EMAIL="${CORRECT_EMAIL}"
      [ -z "${CORRECT_NAME+x}" ] || export GIT_AUTHOR_NAME="${CORRECT_NAME}"
    fi
  '
  committer='
    if [ "${GIT_COMMITTER_EMAIL}" = "${OLD_EMAIL}" ]; then
      [ -z "${CORRECT_EMAIL+x}" ] || export GIT_COMMITTER_EMAIL="${CORRECT_EMAIL}"
      [ -z "${CORRECT_NAME+x}" ] || export GIT_COMMITTER_NAME="${CORRECT_NAME}"
    fi
  '

  case "${TYPE:-both}" in
    author) filter="${author}" ;;
    committer) filter="${committer}" ;;
    both) filter="${author} ${committer}" ;;
  esac

  export OLD_EMAIL CORRECT_EMAIL CORRECT_NAME

  git filter-branch --force --env-filter "${filter}" \
  --tag-name-filter cat -- --branches --tags
}


parse_options() {
  while [ "$#" -gt 0 ]; do
    case "${1}" in
      --correct-email|-e)
        if [ -n "${2+x}" ]; then
          error 'Missing value for `--correct-email` parameter'
        fi
        CORRECT_EMAIL="$2"
        shift 2
        ;;
      --help|-h)
        usage
        exit 0
        ;;
      --correct-name|-n)
        if [ -n "${2+x}" ]; then
          error 'Missing value for `--correct-name` parameter'
        fi
        CORRECT_NAME="$2"
        shift 2
        ;;
      --old-email|-o)
        if [ -n "${2+x}" ]; then
          error 'Missing value for `--old-email` parameter'
        fi
        OLD_EMAIL="$2"
        shift 2
        ;;
      --type|-t)
        if [ -n "${2+x}" ]; then
          error 'Missing value for `--type` parameter'
        fi
        TYPE="$2"
        shift 2
        ;;
      *)
        error "invalid option \`$1\`"
        ;;
    esac
  done

  if [ -z "${CORRECT_EMAIL:-}" ]; then
    CORRECT_EMAIL="$(git config user.email)"
  fi
  if [ -z "${CORRECT_NAME:-}" ]; then
    CORRECT_NAME="$(git config user.name)"
  fi
}


validate_options() {
  # Either OLD_EMAIL should be set or ALL should be true
  if [[ -z "${OLD_EMAIL+x}" ]] && ! ${ALL}; then
    msg="missing target of the rewrite"
    msg="${msg}\nuse either --old-email option or --all flag"
    error "${msg}"
  fi

  # OLD_EMAIL shouldn't be set if ALL is true as well to prevent misuse
  if [[ -n "${OLD_EMAIL+x}" ]] && ${ALL}; then
    msg="ambiguous target of the rewrite"
    msg="${msg}\nuse either --old-email option or --all flag"
    error "${msg}"
  fi

  # CORRECT_NAME should be either unset or set to non-empty string
  [[ -n "${CORRECT_NAME-x}" ]] || error "empty name is not allowed"

  # Either CORRECT_EMAIL or CORRECT_NAME should be set
  if [[ -z "${CORRECT_EMAIL+x}" ]] && [[ -z "${CORRECT_NAME+x}" ]]; then
    msg="missing correct email and/or name to set"
    msg="${msg}\nuse --correct-email and/or --correct-name options"
    msg="${msg}\nor --use-config flag with user values set in Git config"
    error "${msg}"
  fi

  # TYPE should be a valid identifier
  if [[ "${TYPE}" != 'both' ]] \
     && [[ "${TYPE}" != 'author' ]] \
     && [[ "${TYPE}" != 'committer' ]]; then
    error "invalid type '${TYPE}'"
  fi
}


COMMAND="${0#*-}"
unset OLD_EMAIL
unset CORRECT_EMAIL
unset CORRECT_NAME
TYPE='both'

parse_options "$@"
validate_options

reauthor
