#!/usr/bin/env python3

"""
git-churn - Show churn for the files changed in the branch:

   $ git churn

   $ git churn --since "4 months ago"

   $ git churn origin/master..HEAD

"""

from __future__ import print_function
import logging
import operator
import argparse
import re
import subprocess
import sys


def sort_by_size(item_a, item_b):
    """
    [INTERNAL] Sorts 2 items according to size.
    """
    if item_a[1] > item_b[1]:
        return 1
    if item_a[1] < item_b[1]:
        return -1
    if item_a[0] > item_b[0]:
        return 1
    if item_a[0] < item_b[0]:
        return -1
    return 0


def sort_by_count_then_filename(files_dict, reverse=False):
    """
    Sorting algorithm which replaces piping output into GNU `sort`
    """
    counters = files_dict.items()
    out = dict()
    for file, count in counters:
        list_of_files = out.setdefault(count, [])
        list_of_files.append(file)
        out[count] = sorted(list_of_files)

    return sorted(out.items(), key=operator.itemgetter(0), reverse=reverse)


def remove_blacklisted_cli_options(args_list):
    """
    Blacklists certain CLI arguments/flags that we know we don't use, but would
    mess with the internal workings of the rest of the program.
    """
    args = argparse.ArgumentParser(prog="git churn (BLACK HOLE)",
                                   allow_abbrev=False,
                                   description="")
    args.add_argument("--format")
    sanitized_args = args.parse_known_args(args_list)[1]
    return sanitized_args


def count_uniques(files):
    """
    Counts unique strings, filtering out (without counting) blank entries
    """
    file_count = FilesCounter()
    for file in files:
        if (" " + file).isspace():
            continue
        file_count[file] += 1
    return file_count


def remove_coloring(string):
    """
    Removes ANSI escape sequences, primarily to remove automatic terminal
    coloring
    """
    ansi_escape = re.compile(r'\x1b[^m]*m')
    return ansi_escape.sub("", string)


class Error(Exception):
    """git-churn error"""


class FilesCounter(dict):
    """
    Helper class to act as a hash map for all files, counting incidence of each
    file (including path). Intended to set value to zero if key (filename) is
    missing from the hash map.
    """

    def __missing__(self, key):
        return 0

    def strip(self):
        """
        Strips out entries that contain only space characters (e.g., tabs,
        spaces, other invisible characters that act as spacers)
        """
        keys = list(self.keys())
        for key in keys:
            if (key + " ").isspace():
                del self[key]
        return self


class Churn(object):
    """git-churn tool"""

    def __init__(self, options):
        if len(options.spacer) == 0:
            options.spacer = " "
        if len(options.alt_spacer) == 0:
            options.alt_spacer = " "

        self.log = logging.getLogger("git-churn")
        self.opt = options
        self.str_length = 0
        self.count_length = 0
        self.spacer = options.spacer
        logging.basicConfig(
            level=logging.DEBUG if self.opt.debug else logging.FATAL
        )

    def get_current_spacer(self):
        """
        Helper method for finding the current character matchup for following
        from filepath to number of incidents of changes.
        """
        if self.opt.alternate_spacer:
            self.spacer = {
                self.opt.spacer: self.opt.alt_spacer,
                self.opt.alt_spacer: self.opt.spacer
            }.get(self.spacer, self.opt.spacer)
        return self.spacer

    def calc_file_max(self, file):
        """
        Calculates max length of all filenames listed
        """
        self.str_length = max(f for f in [len(file), self.str_length])

    def calc_count_max(self, count):
        """
        Calculates max (str) length of all counts listed
        """
        self.count_length = max(c for c in [len(str(count)), self.count_length])

    def git(self, args, capture=True):
        """
        A shim around the `git` shell command. Helps log outbound shell
        invocations, pipe STDOUT/STDERR, and raise a python exception if the
        command fails.
        """
        args = ["git"] + args
        self.log.debug("git cmd: %r", args)
        sub = subprocess.Popen(args,
                               stdout=subprocess.PIPE if capture else None,
                               stderr=subprocess.PIPE if capture else None)
        stdout, stderr = sub.communicate()
        if sub.returncode:
            raise Error("command {0!r} failed with exit code {1!r}, "
                        "stdout={2!r}, stderr={3!r}".format(
                            args, sub.returncode, stdout, stderr))
        return remove_coloring((stdout or b"").decode("utf-8")).splitlines()

    def changed_files(self, other_args, distance=None, commitish=None, head="HEAD", remote="origin", branch="master"):
        """
        Lists all files that were changed
        """
        if remote and branch and not commitish:
            commitish = "{0}/{1}".format(remote, branch)

        if commitish and head and not distance:
            distance = "{0}..{1}".format(commitish, head)

        args = [
            "log"
        ]
        if other_args:
            args += other_args
        else:
            args += [distance]
        args += [
            "--name-only",
            "--format=format:"
        ]
        files = list()
        for file in self.git(args):
            files.append(file)
        return files

    def churned_files(self):
        """
        Lists all files that were changed and how often they were as a
        FilesChanged object
        """
        return count_uniques(
            self.git([
                "log",
                "--all",
                "--name-only",
                "--format=format:"
            ])
        )

    def main(self, other_args):
        """ main method """
        try:
            changed_files = self.changed_files(other_args)
            self.log.debug("Files changed: %s", changed_files)
            churned_files = FilesCounter()
            for file, count in self.churned_files().items():
                if file not in changed_files:
                    continue

                churned_files[file] = count
                self.calc_file_max(file)
                self.calc_count_max(count)

            self.log.debug("churned files count total: %s", len(churned_files))
            churned_files = sort_by_count_then_filename(churned_files,
                                                        reverse=True)
            spacer = "-"

            for count, files in churned_files:
                for file in files:
                    spacer = self.get_current_spacer()
                    print(
                        "{4}{0}{2}{3}{1}".format(
                            (file + " ").ljust(self.str_length + 2, spacer),
                            (" " + str(count)).rjust(self.count_length + 1, " "),
                            spacer,
                            self.opt.pointer,
                            "    "
                        )
                    )
            return 0
        except Error as error:
            print("ERROR: {0.__class__.__name__}: {0}".format(error))
            return 1


def main():
    """ initial function called when __name__ == "__main__" """
    parser = argparse.ArgumentParser(prog="git churn",
                                     usage="%(prog)s [options]",
                                     allow_abbrev=False,
                                     description="Show churn for the files changed in the branch")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--alternate-spacer", action="store_true")
    parser.add_argument("--spacer", default="-")
    parser.add_argument("--alt-spacer", default="=")
    parser.add_argument("--pointer", default=">")
    opts, other_args = parser.parse_known_args(sys.argv[1:])
    other_args = remove_blacklisted_cli_options(other_args)

    sys.exit(
        Churn(opts).main(other_args)
    )


if __name__ == "__main__":
    main()
