# vim: ft=sh

___trigger_chef_gen_hook() {
  local when type

  when="$1"; shift
  type="$1"; shift

  if ! ( [ -n "$type" ] && [ -n "$when" ] ); then
    # error: 'post-cookbook' or the like was not able to be compiled into a valid hook directory name
    return 1
  fi
  
  if [ ! -d "${HOME}/.chef-gen/hooks/${when}-${type}" ]; then
    # Nothing to do here
    # printf 'No such location: "%s"\n' "~/.chef-gen/hooks/${when}-${type}" >&2
    return 0
  fi

  find "${HOME}/.chef-gen/hooks/${when}-${type}" -maxdepth 1 -type f -print | while read file; do
    if [ ! -x "$file" ]; then
      printf 'File is not an executable file: "%s"\n' "$file" >&2
      continue
    fi

    printf 'Executing "%s"...\n' "$file"
    sh -c 'file="$1"; shift; "$file" $@' arg0 "`realpath "$file"`" $@
    printf 'Done executing "%s".\n' "$file"
  done
}


chef-generate() {
  local out

  if [ $# -eq 0 ]; then
    printf 'Needs an argument to know what to generate\n' 1>&2
    return 1
  fi

  case " $* " in
    *' -h '*|*' --help '*|*' -v '*|*' --version '*)
      # echo '=============> FOUND HELP/VERSION FLAG! <============='
      command chef generate "$@"; out=$?
      ;;
    *)
      ___trigger_chef_gen_hook 'pre' "$@"
      command chef generate "$@"; out=$?
      ___trigger_chef_gen_hook 'post' "$@"
      ;;
  esac

  return $out
}

chef() {
  local command
  if [ $# -gt 0 ] && type "chef-${1}" &>/dev/null; then
    command="$1"; shift
    "chef-${command}" "$@"
  else
    command chef "$@"
  fi
  return $?
}
