#!/usr/bin/env bash
set -euo pipefail

__path_to_openssl() {
  if ! command openssl version | grep -qF -e 'OpenSSL 0' &>/dev/null; then
    command -v openssl
    return 0
  fi

  if command -v brew &>/dev/null; then
    printf '%s/bin/openssl\n' "$(brew --prefix openssl)"
    return 0
  fi

  return 1
}
openssl=$(__path_to_openssl)

__message() {
  printf '>>  %s\n' "$*"
}

__error() {
  __message "$*" >&2
}

__fatal() {
  __error "$*"
  exit 1
}

__is_in_path() {
  local expected_directory bin pth list_of_paths
  list_of_paths=( $(echo "$PATH" | tr -s ':' "\n") )
  bin="$1"; shift
  if [ -e "$bin" ] && [ -f "$bin" ]; then
    expected_directory=$(dirname "${bin}")
  else
    expected_directory="${bin}"; shift
  fi

  for pth in "${list_of_paths[@]}"; do
    if [ "$pth" = "$expected_directory" ]; then
      return 0
    fi
  done
  return 1
}

__checksum_sha256() {
  local expected_checksum checksum file
  expected_checksum="$2"
  file="$1"

  if [ -z "$openssl" ]; then
    __error "An up-to-date version of OpenSSL is required to verify the download"
    return 1
  fi

  printf '>>  Validating payload was not corrupted in transit... '
  checksum=$("$openssl" sha256 "$file" | sed -e 's/SHA256(.*)= //g')
  printf 'Done\n'

  if diff -q <(printf '%s' "$checksum" | head -n1) <(printf '%s' "$expected_checksum" | head -n1) &>/dev/null; then
    return 0
  else
    __error "Invalid checksum for '${file//${HOME}/~}'"
    return 1
  fi
}

__download_go_archive() {
  local version destination download_url checksum OS ARCH
  version="$1"
  destination="$2"

  case "$(uname -a 2>/dev/null)" in
    Darwin*)
      OS='darwin'
      ;;
    *)
      OS='linux'
      ;;
  esac

  ARCH="$(uname -m 2>/dev/null)"
  case "$ARCH" in
    x86_64)
      ARCH="amd64"
      ;;
    arm*)
      # Leave it alone, arm architecture is too specific
      ;;
    *)
      ARCH="386"
      ;;
  esac

  download_url="https://storage.googleapis.com/golang/go${version}.${OS}-${ARCH}.tar.gz"

  __message "Downloading the installer (${OS}-${ARCH})"
  command curl -sSLo "${destination}" "${download_url}"

  if [ -n "$openssl" ]; then
    checksum_url="${download_url}.sha256"
    __message 'Downloading the checksum'
    checksum="$(command curl -sSL "$checksum_url" | head -n1)"

    __checksum_sha256 "${destination}" "${checksum}"
  fi
}

__install_go() {
  local go_directory archive version
  go_directory='/usr/local/go'
  version="$1"

  if [ ! -d "${go_directory}" ]; then
    sudo mkdir -p "${go_directory}"
  fi

  archive=$(mktemp -t 'golang-installer-XXXXXXXXXXXXXXXXXXX.tar.gz')

  __download_go_archive "$version" "$archive"

  __message 'Extracting the installer'
  sudo tar xzf "${archive}" -C "${go_directory}" --strip-components 1

  if [ ! -e "${go_directory}/bin/go" ] || [ ! -x "${go_directory}/bin/go" ]; then
    __error 'The Go compiler was not installed as expected'
    __fatal 'Unable to proceed, given the atypical installation of Go'
  fi
}

__remove_custom_go() {
  local go_directory
  go_directory='/usr/local/go'

  if ! [ -d "${go_directory}" ]; then
    return 0
  fi

  sudo rm -rf "${go_directory}"
}

__remove_brew_go() {
  if ! command -v brew &>/dev/null; then
    return 0
  fi

  if brew list go &>/dev/null; then
    brew uninstall go
  fi
}

__update_go() {
  __remove_custom_go
  __install_go "$@"
}

__ensure_custom_go_is_used() {
  local go_directory go_command expected_go_bin
  go_directory='/usr/local/go'
  expected_go_bin="${go_directory}/bin/go"
  version="$1"

  if ! __is_in_path "${go_directory}/bin"; then
    __error "${go_directory//${HOME}/~}/bin is not in your PATH"
    # Temporary correction to test that it installed correctly
    PATH="${go_directory}/bin:$PATH"
  fi

  __remove_brew_go

  if [ ! -e "${expected_go_bin}" ]; then
    __message 'Installing the Go compiler'
    __install_go "$version"
  fi

  if ! command -v go &>/dev/null; then
    __error 'Go compiler was not installed correctly'
    __message 'Reinstalling the Go compiler'
    __update_go "$version"
  fi

  if ! grep -qF -e "go version go${version}" <("${go_directory}/bin/go" version) &>/dev/null; then
    __message 'Found an outdated version of the Go compiler already installed'
    __message 'Updating the Go compiler'
    __update_go "$version"
  else
    __message 'Go compiler is up to date!'
  fi

  # cache the command up front and get around `set -e` issues
  go_command=$(command -v go 2>/dev/null || true)

  if ! [ "${go_command}" = "${expected_go_bin}" ]; then
    __error "A command \`go\` exists at '${go_command}', but may not be the desired Go compiler"
    __fatal "Add '$(dirname "${expected_go_bin}")' to the front of your PATH to resolve this issue"
  fi
}


if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'Golang installer'
  printf '%s\n' '-------------------------------------------------------'

  __ensure_custom_go_is_used '1.8.3'
fi
