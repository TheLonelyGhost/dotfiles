#!/usr/bin/env bash
set -euo pipefail

__message() {
  printf '>>  %s\n' "$*"
}

__error() {
  __message "$*" >&2
}

__fatal() {
  __error "$*"
  exit 1
}

__determine_arch() {
  case "$(uname -a 2>/dev/null)" in
    Darwin*)
      printf 'darwin'
      return 0
      ;;
    *)
      printf 'linux'
      return 0
      ;;
  esac
}

__determine_os() {
  local arch=$(uname -m 2>/dev/null)
  case "$arch" in
    x86_64)
      printf 'x64'
      return 0
      ;;
    arm*)
      # Leave it alone, arm architecture is too specific
      printf 'arm'
      return 0
      ;;
    *)
      printf 'x86'
      return 0
      ;;
  esac
}

__ensure_heroku_cli() {
  local heroku version_str comp preferred_version
  preferred_version="$1"
  if command -v heroku &>/dev/null || [ -x /usr/local/bin/heroku ]; then
    return
  else
    __install_heroku_cli
  fi
}

__install_heroku_cli() {
  local os arch dl_url dl_file
  os=$(__determine_os)
  arch=$(__determine_arch)
  dl_url="https://cli-assets.heroku.com/heroku-cli/channels/stable/heroku-cli-${os}-${arch}.tar.gz"
  dl_file=$(mktemp -t 'heroku-cli-XXXXXXXXXXXXXX.tar.gz')

  command curl -sSLo "$dl_file" "$dl_url"

  [ -d '/usr/local/lib/heroku' ] || sudo mkdir -p /usr/local/lib/heroku
  [ -d '/usr/local/bin' ] || sudo mkdir -p /usr/local/bin

  sudo tar xzf "$dl_file" -C /usr/local/lib/heroku

  sudo ln -vfs /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]] && command -v curl &>/dev/null; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'Heroku toolbelt (CLI)'
  printf '%s\n' '-------------------------------------------------------'

  __ensure_heroku_cli '6.14.35'
fi
