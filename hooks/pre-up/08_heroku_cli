#!/usr/bin/env bash
set -euo pipefail

HOOK_DIR="${0%/*}/../"
source "${HOOK_DIR}/lib/base.sh"
trap -- '__cleanup_temp' EXIT

__determine_arch() {
  local arch
  arch=$(uname -m 2>/dev/null)
  case "$arch" in
    x86_64)
      printf 'x64'
      return 0
      ;;
    arm*)
      # Leave it alone, arm architecture is too specific
      printf 'arm'
      return 0
      ;;
    *)
      printf 'x86'
      return 0
      ;;
  esac
}

__ensure_heroku_cli() {
  if command -v heroku &>/dev/null || [ -x /usr/local/bin/heroku ]; then
    command heroku update
  else
    __install_heroku_cli
  fi
}

__install_heroku_cli() {
  local os arch dl_url dl_file tmpdir
  os="$(get-goos)"
  arch="$(__determine_arch)"
  dl_url="https://cli-assets.heroku.com/heroku-cli/channels/stable/heroku-cli-${os}-${arch}.tar.gz"
  tmpdir="$(mktemp-dir)"
  dl_file="${tmpdir}/heroku-cli.tar.gz"

  command curl -SLo "$dl_file" "$dl_url"

  if [ ! -d '/usr/local/lib/heroku' ]; then
    sudo mkdir -p /usr/local/lib/heroku
  fi
  if [ ! -d '/usr/local/bin' ]; then
    sudo mkdir -p /usr/local/bin
  fi

  pushd '/usr/local/lib/heroku' &>/dev/null
  sudo tar xzf "$dl_file" --strip-components=1
  popd &>/dev/null

  sudo ln -vfs /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]] && command -v curl &>/dev/null; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'Heroku toolbelt (CLI)'
  printf '%s\n' '-------------------------------------------------------'

  __ensure_heroku_cli
fi
