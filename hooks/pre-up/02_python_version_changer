#!/usr/bin/env bash
set -euo pipefail

__message() {
  printf '>>  %s\n' "$*"
}

__error() {
  __message "$*" >&2
}

__fatal() {
  __error "$*"
  exit 1
}

__update_git_repo() {
  local repo_location project_name is_stashed
  repo_location="$1"
  if [ $# -gt 1 ]; then
    project_name="$2"
  else
    project_name="${repo_location}"
  fi
  is_stashed=0

  if command git -C "${repo_location}" ls-remote origin | grep -Fe 'master pushes to master' | grep -qFe 'local out of date' &>/dev/null; then
    __message "${project_name} is out of date. Updating..."
    if command git -C "${repo_location}" status --porcelain | grep -e '^ *[A-Z?]' &>/dev/null; then
      command git -C "${repo_location}" stash --all
      is_stashed=1
    fi
    command git -C "${repo_location}" pull --rebase origin master
    if [ "$is_stashed" -eq 1 ]; then
      # We want to let the person know if there are merge errors
      command git -C "${repo_location}" stash pop
    fi
  fi

  __message "${project_name} is up-to-date"
}

__install_pyenv() {
  local pyenv default_version
  default_version="${1:-3.7.0}"

  if [ ! -d "${HOME}/.pyenv" ]; then
    __message 'Installing Pyenv'
    command git clone https://github.com/pyenv/pyenv.git "${HOME}/.pyenv"
  else
    __message 'Updating Pyenv'
    command git -C "${HOME}/.pyenv" fetch origin
    command git -C "${HOME}/.pyenv" reset --hard origin/master
  fi

  if ! command -v pyenv &>/dev/null; then
    touch "${HOME}/.path.local"

    if ! printf '%s\n' "$PATH" | grep -qFe '/.pyenv/bin' &>/dev/null && ! grep -qFe '/.pyenv/bin' "${HOME}/.path.local"; then
      printf 'PATH="%s"\n' "\${HOME}/.pyenv/bin:\${PATH}" >> "${HOME}/.path.local"
      __message 'Pyenv has been added to your PATH. Please reload the shell session'
    fi

    pyenv="${HOME}/.pyenv/bin/pyenv"
  else
    pyenv=$(command -v pyenv)
  fi

  if [ ! -e "${HOME}/.python-version" ]; then
    printf '%s\n' "$default_version" > "${HOME}/.python-version"
  fi

  "$pyenv" install --skip-existing
}


if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'Python version manager (pyenv)'
  printf '%s\n' '-------------------------------------------------------'

  __install_pyenv '3.7.0'
  __update_git_repo "${HOME}/.pyenv" 'Pyenv'
fi
