#!/usr/bin/env bash
set -euo pipefail

PATH="${HOME}/.pyenv/bin:${PATH}"

HOOK_DIR="${0%/*}/../"
source "${HOOK_DIR}/lib/base.sh"
trap -- '__cleanup_temp' EXIT

if ! command -v python3 | grep -qFe '.pyenv/shim' &>/dev/null && type pyenv &>/dev/null; then
  eval "$(pyenv init -)"
fi

version_compare_py="$(cat "${HOOK_DIR}/lib/version_compare.py")"

should-install() {
  local current_version desired_version exit_code jabba
  jabba="$(command -v jabba 2>/dev/null || true)"
  if [ -z "${jabba:-}" ] && [ -x "${HOME}/.local/bin/jabba" ]; then
    jabba="${HOME}/.local/bin/jabba"
  fi

  desired_version="$1"
  current_version="$("$jabba" --version 2>/dev/null || true)"
  exit_code="$(python3 -c "$version_compare_py" -- "$current_version" "$desired_version" &>/dev/null && echo $? || echo $?)"

  case "$exit_code" in
    0)
      __message "Desired version ('$desired_version') is already installed"
      return 1
      ;;
    5)
      __message "Desired version ('$desired_version') is higher than current version ('$current_version')"
      return 0
      ;;
    8)
      __message "Desired version ('$desired_version') is older than current version ('$current_version')"
      return 1
      ;;
    *)
      __debug "Found exit code: $exit_code"
      __fatal "Some kind of error occurred..."
      return 2
      ;;
  esac
}

install-jabba() {
  local version tmpdir arch os
  tmpdir="$(mktemp-dir)"

  if [ $# -gt 0 ]; then
    version="$1"; shift
  else
    version="$(curl -sL https://shyiko.github.com/jabba/latest)"
  fi

  if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.+-]+)?$ ]]; then
    __fatal "Invalid jabba version: '$version'"
  fi

  if should-install "$version"; then
    mkdir -p "${HOME}/.jabba/bin"

    os="$(get-goos)"
    arch="$(get-goarch)"

    pushd "$tmpdir" &>/dev/null

    curl -SsLo ./jabba "https://github.com/shyiko/jabba/releases/download/${version}/jabba-${version}-${os}-${arch}"
    chmod a+x ./jabba
    mv ./jabba "${HOME}/.jabba/bin/jabba"

    popd &>/dev/null
  fi

  # post-download configuration
  __message 'Creating ~/.jabba/jabba.sh'
  {
    echo "# https://github.com/shyiko/jabba"
    echo "# This file is indented to be \"sourced\" (i.e. \". ~/.jabba/jabba.sh\")"
    echo ""
    echo "export JABBA_HOME=\"\$HOME/.jabba\""
    echo ""
    echo "jabba() {"
    echo "    local fd3"
    echo "    fd3=\"\$(mktemp /tmp/jabba-fd3.XXXXXX)\""
    echo "    (JABBA_SHELL_INTEGRATION=ON \"\${HOME}/.jabba/bin/jabba\" \"\$@\" 3>| \"\${fd3}\")"
    echo "    local exit_code=\$?"
    echo "    eval \"\$(cat \"\${fd3}\")\""
    echo "    rm -f \"\${fd3}\""
    echo "    return \${exit_code}"
    echo "}"
    echo ""
    echo "if [ ! -z \"\$(jabba alias default)\" ]; then"
    echo "    jabba use default"
    echo "fi"
  } > "${HOME}/.jabba/jabba.sh"

  __message 'Creating ~/.jabba/jabba.fish'
  {
    printf '# https://github.com/shyiko/jabba\n'
    printf '# This file is intended to be "sourced" (e.g., ". ~/.jabba/jabba.fish")\n'
    printf '\n'
    printf 'set -xg JABBA_HOME "%s"\n' '$HOME/.jabba'
    printf '\n'
    printf 'function jabba\n'
    printf '    set fd3 (mktemp /tmp/jabba-fd3.XXXXXX)\n'
    printf '    env JABBA_SHELL_INTEGRATION=ON $HOME/.jabba/bin/jabba %s 3> %s\n' '$argv' '$fd3'
    printf '    set exit_code %s\n' '$status'
    printf "    eval (cat \$fd3 | sed \"s/^export/set -xg/g\" | sed \"s/^unset/set -e/g\" | tr '=' ' ' | sed \"s/:/\\\\\" \\\\\"/g\" | tr '\\\\\\\\n' ';')\n"
    printf '    rm -f %s\n' '$fd3'
    printf '    return %s\n' '$exit_code'
    printf 'end\n'
    printf '\n'
    printf '[ ! -z (echo (jabba alias default)) ]; and jabba use default\n'
  } > "${HOME}/.jabba/jabba.fish"

  __message 'Creating command-only shim for direnv integration'
  mkdir -p "${HOME}/.local/bin"
  {
    printf '#!/usr/bin/env bash\n'
    printf '\n'
    printf '. "%s"\n' '$HOME/.jabba/jabba.sh'
    printf '\n'
    printf 'jabba "$@"\n'
  } > "${HOME}/.local/bin/jabba"
  chmod a+x "${HOME}/.local/bin/jabba"
}

install-java() {
  local version jabba
  jabba="${HOME}/.local/bin/jabba"
  version="$1"

  "$jabba" install "${version}"
}


if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'Java version manager'
  printf '%s\n' '-------------------------------------------------------'

  install-jabba '0.11.2'
  install-java '~1.13'
fi
