#!/usr/bin/env bash
set -euo pipefail

HOOK_DIR="${0%/*}/../"
source "${HOOK_DIR}/lib/base.sh"
trap -- '__cleanup_temp' EXIT


__ensure_rustup() {
  local rustup_binary tmpdir
  rustup_binary="$(__get_cmd rustup "${HOME}/.cargo/bin/rustup")"

  if [ ! -x "${rustup_binary}" ]; then
    __message 'Installing rustup...'
    tmpdir=$(mktemp-dir)

    # rustup needs to be installed
    command curl -sSLo "$tmpdir/install.sh" https://sh.rustup.rs
    command sh "$tmpdir/install.sh" --no-modify-path -y || true
  else
    "${rustup_binary}" self update
  fi
}

__ensure_rust() {
  local rustup_binary rust_binary

  rustup_binary="$(__get_cmd rustup "${HOME}/.cargo/bin/rustup")"
  rust_binary="$(__get_cmd rustc "${HOME}/.cargo/bin/rustc")"

  if [ ! -x "${rust_binary}" ]; then
    "${rustup_binary}" install stable
  else
    "${rustup_binary}" update stable
  fi
}

__ensure_rust_tools() {
  local rustup_binary
  rustup_binary="$(__get_cmd rustup "${HOME}/.cargo/bin/rustup")"

  "${rustup_binary}" component add clippy rustfmt-preview rust-src 2>&1 | grep -v 'up to date' || true
}

__ensure_cargo_path() {
  local cargo_bin="${HOME}/.cargo/bin"

  if ! is-in-path "${cargo_bin}"; then
    __error "${cargo_bin//${HOME}/~} is not in PATH"
    export PATH="${PATH}:${cargo_bin}"
  fi
}


if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'Rust version manager (rustup)'
  printf '%s\n' '-------------------------------------------------------'

  __ensure_cargo_path
  __ensure_rustup
  __ensure_rust
  __ensure_rust_tools
fi
