#!/usr/bin/env bash

set -euo pipefail

PACKAGES=()
function __add_package() {
  PACKAGES+=("$1")
}

has_command() {
  if command -v "$1" 1>/dev/null 2>/dev/null; then
    return 0
  else
    return 1
  fi
}
is_nix_command() {
  if command -v "$1" 2>/dev/null | grep -qFe '.nix-profile'; then
    return 0
  else
    return 1
  fi
}

if ! (has_command 'nix-env' && has_command 'nix-channel'); then
  . "${HOME}/.nix-profile/etc/profile.d/nix.sh"
fi

nix-channel --update
nix-env --quiet --delete-generations 14d
nix-store --quiet --gc

nix upgrade-nix

__add_package 'nixpkgs.gnugrep'
__add_package 'nixpkgs.gnused'
__add_package 'nixpkgs.gnutar'
__add_package 'nixpkgs.gnumake'
__add_package 'nixpkgs.findutils'
__add_package 'nixpkgs.neovim'
__add_package 'nixpkgs.universal-ctags'
__add_package 'nixpkgs.jq'
__add_package 'nixpkgs.direnv'
__add_package 'nixpkgs.silver-searcher'
__add_package 'nixpkgs.ripgrep'
__add_package 'nixpkgs.rclone'
__add_package 'nixpkgs.chruby'
__add_package 'nixpkgs.bat'

# Other utils
if [[ "$(uname -s)" != "Darwin" ]]; then
  __add_package 'nixpkgs.go'  # `go build` is broken on MacOS (unless with CGO_ENABLED=0)
fi

if [ ${#PACKAGES[@]} -gt 0 ]; then
  nix-env --no-build-output --install --attr "${PACKAGES[@]}"
fi

nix optimise-store
