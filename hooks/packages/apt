#!/bin/bash
set -e

# Current Node LTS: v6.9.2
NODE_VERSION=6

PACKAGES=""
function __add_package() {
  PACKAGES="$1 $PACKAGES"
}
PREINSTALL_PKGS=""
function __add_pre_package() {
  PREINSTALL_PKGS="$1 $PREINSTALL_PKGS"
}
RM_PACKAGES=""
function __rm_package() {
  RM_PACKAGES="$1 $RM_PACKAGES"
}


# Prerequisite for some of the below dependencies
if [ ! -e /usr/lib/apt/methods/https ]; then
  __add_pre_package "apt-transport-https"
fi
if [ ! -x /usr/bin/curl ]; then
  __add_pre_package "curl"
fi

if [[ "X$PREINSTALL_PKGS" != "X" ]]; then
  sudo apt-get update -qq
  sudo apt-get install -y -qq $PREINSTALL_PKGS
fi

# ----------------------
# | Add packages below |
# ----------------------

# Dev and compiling tools
__add_package "build-essential"
__add_package "autoconf"
__add_package "openssl"

# Ruby
__add_package "ruby-dev"

# Dev command line goodies
__add_package "tree"
__add_package "exuberant-ctags"
__add_package "silversearcher-ag"
__add_package "dos2unix"
__add_package "xclip"
__add_package "tmux"

# NodeJS
if [ ! -e /etc/apt/sources.list.d/nodesource.list ]; then
  curl --silent -o /tmp/nodesource.gpg.key https://deb.nodesource.com/gpgkey/nodesource.gpg.key
  [ -e /tmp/nodesource.gpg.key ] && \
    sudo apt-key add /tmp/nodesource.gpg.key &>/dev/null \
    || true

  NODE_DISTRO="$(lsb_release -s -c)"

  echo "deb https://deb.nodesource.com/node_${NODE_VERSION}.x $NODE_DISTRO main" | sudo tee /etc/apt/sources.list.d/nodesource.list &>/dev/null
  echo "deb-src https://deb.nodesource.com/node_${NODE_VERSION}.x $NODE_DISTRO main" | sudo tee -a /etc/apt/sources.list.d/nodesource.list &>/dev/null
fi

# Is an older version of nodejs installed? (e.g., official Ubuntu version) If so, remove it first.
if command -v "nodejs" &>/dev/null && [ "X$(nodejs -v | grep -e '^v'${NODE_VERSION} )" == "X" ]; then
  __rm_package "nodejs"
  __rm_package "npm" # if from Ubuntu Official, this is a separate package
fi
__add_package "nodejs"

# Go
__add_package "golang"

# Crypto
__add_package "keychain"
__add_package "gnupg-agent"
__add_package "gnupg2"

# Graphical dependencies
if command -v Xorg &>/dev/null; then
  [ -e /etc/apt/sources.list.d/nixnote-*.list ] || \
    sudo add-apt-repository -y ppa:nixnote/nixnote2-daily &>/dev/null
  __add_package "nixnote2"

  [ -e /etc/apt/sources.list.d/no1wantdthisname-*.list ] || \
    sudo add-apt-repository -y ppa:no1wantdthisname/ppa &>/dev/null
  __add_package "fontconfig-infinality"

  # Because source code fonts are nice...
  __add_package "fonts-hack-ttf"
fi

# ------------------------
# | Done adding packages |
# ------------------------

cat <<MSG

PACKAGES: $PACKAGES

MSG

[ "X$RM_PACKAGES" != "X" ] && \
  sudo apt-get remove -y $RM_PACKAGES \
  || true

sudo apt-get update -y
sudo apt-get install -y $PACKAGES

# Configuring infinality, if needed
if [[ "$(readlink /etc/fonts/infinality/conf.d 2>/dev/null)" != *linux* ]]; then
  ln -frs /etc/fonts/infinality/styles.conf.avail/linux /etc/fonts/infinality/conf.d
fi

# Create alias commands for drop-in replacements of antiquated tools:

if ! command -v ctags &>/dev/null; then
  if command -v ctags-exuberant &>/dev/null; then
    sudo ln -v -s "$(command -v ctags-exuberant)" "/usr/local/bin/ctags"
  else
    echo "ctags (as either \`ctags' or \`ctags-exuberant') is not installed" 1>&2
  fi
fi

if ! command -v node &>/dev/null; then
  if command -v nodejs &>/dev/null; then
    sudo ln -v -s "$(command -v nodejs)" "/usr/local/bin/node"
  else
    echo "NodeJS (as either \`node' or \`nodejs') is not installed" 1>&2
  fi
fi
