#!/usr/bin/env bash
set -euo pipefail

HOOK_DIR="${0%/*}/../"
source "${HOOK_DIR}/lib/base.sh"
trap -- '__cleanup_temp' EXIT

__ensure_plugin_manager() {
  if [ ! -e "$HOME"/.config/nvim/autoload/plug.vim ]; then
    printf '>>  NeoVim plugin manager is being installed... '
    command curl -fLo "$HOME"/.config/nvim/autoload/plug.vim --create-dirs \
      https://github.com/junegunn/vim-plug/raw/master/plug.vim
    printf 'Done.\n'
  fi
}

__install_plugins() {
  local nvim_bundle_config nvim
  nvim_bundle_config="${HOME}/.config/nvim/bundles.vim"
  nvim="$(command -v nvim)"

  if [ ! -e "${nvim_bundle_config}" ]; then
    return 0
  fi

  printf '>>  NeoVim bundles are being installed... '
  if printf 'PlugInstall|qall\n' | "$nvim" -u "${nvim_bundle_config}" -es; then
    printf 'Done\n'
  else
    printf 'ERROR\n'
    __error "Encountered an error when running \`nvim +PlugInstall\`"
  fi
}

__update_plugins() {
  local nvim_bundle_config nvim
  nvim_bundle_config="${HOME}/.config/nvim/bundles.vim"
  nvim="$(command -v nvim)"

  if [ ! -e "${nvim_bundle_config}" ]; then
    return 0
  fi

  printf '>>  NeoVim bundles are being updated... '
  if printf 'PlugUpdate|qall\n' | "$nvim" -u "${nvim_bundle_config}" -es; then
    printf 'Done\n'
  else
    printf 'ERROR\n'
    __error "Encountered an error when updating vim plugins"
  fi
}

__update_docs() {
  local nvim
  nvim="$(command -v nvim)"

  printf '>>  NeoVim plugin help docs are being updated... '
  if [ ! -e "${HOME}/.config/nvim/doc/plug.txt" ]; then
    command curl -fLo "${HOME}/.config/nvim/doc/plug.txt" --create-dirs \
      https://github.com/junegunn/vim-plug/raw/master/doc/plug.txt 1>/dev/null 2>/dev/null
  fi
  # shellcheck disable=SC2016
  printf 'helptags $HOME/.config/nvim/doc\nqall\n' | "$nvim" -u "${HOME}/.config/nvim/init.vim" -es
  printf 'Done.\n'
}

__install_python2_bindings() {
  if [ -x "${HOME}/.asdf/shims/python2" ]; then
    python="${HOME}/.asdf/shims/python2"
  elif [ -x "${HOME}/.pyenv/shims/python2" ]; then
    python="${HOME}/.pyenv/shims/python2"
  else
    python="python2"
  fi

  mkdir -p "${HOME}/.local/share/nvim"
  if ! [ -e "${HOME}/.local/share/nvim/nvim-venv2" ]; then
    "${HOME}/.local/bin/virtualenv" --python="$python" "${HOME}/.local/share/nvim/nvim-venv2"
  fi
  source "${HOME}/.local/share/nvim/nvim-venv2/bin/activate"
  __message "Installing latest pynvim (python2)"
  (
    pip install pynvim 2>&1 || pip install --upgrade pynvim 2>&1
  ) | (
    grep -ve '^DEPRECAT.*:' | grep -vFe 'already satisfied' || true
  )
  deactivate
}

__install_python3_bindings() {
  if [ -x "${HOME}/.asdf/shims/python3" ]; then
    python="${HOME}/.asdf/shims/python3"
  elif [ -x "${HOME}/.pyenv/shims/python3" ]; then
    python="${HOME}/.pyenv/shims/python3"
  else
    python="python3"
  fi

  mkdir -p "${HOME}/.local/share/nvim"
  if ! [ -e "${HOME}/.local/share/nvim/nvim-venv3" ]; then
    "${HOME}/.local/bin/virtualenv" --python="$python" "${HOME}/.local/share/nvim/nvim-venv3"
  fi
  source "${HOME}/.local/share/nvim/nvim-venv3/bin/activate"
  __message "Installing latest pynvim (python3)"
  (
    pip install pynvim 2>&1 || pip install --upgrade pynvim 2>&1
  ) | (
    grep -ve '^DEPRECAT.*:' | grep -vFe 'already satisfied' || true
  )
  deactivate
}

__install_language_bindings() {
  # NOTE: Some of these are taken care of as part of the following files:
  # - ~/.default-gems
  # - ~/.default-npm-packages

  __install_python2_bindings
  __install_python3_bindings
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]] && command -v nvim 1>/dev/null 2>/dev/null; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'NeoVim plugins'
  printf '%s\n' '-------------------------------------------------------'

  pushd "${HOME}" 1>/dev/null 2>/dev/null
  __ensure_plugin_manager
  __install_language_bindings
  __install_plugins
  __update_plugins
  __update_docs
  popd 1>/dev/null 2>/dev/null
fi
