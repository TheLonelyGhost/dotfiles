#!/usr/bin/env bash
set -euo pipefail

if [ ! -d "${HOME}/Library" ]; then
  # Must not be a MacOS install if ~/Library doesn't exist
  exit 0
fi

__debug() {
  true &&
    # __message "[DEBUG] >> ${*}" &&
    true
}

__plist_exec() {
  local plist plb query usage
  plb='/usr/libexec/PlistBuddy'
  usage=<<EOF
USAGE:   __plist_exec <plist> <query>
EOF

  if [ ! $# -gt 1 ]; then
    printf '%s\n' "$usage" 1>&2
    return 1
  fi

  plist="${HOME}/Library/Preferences/$1"; shift
  query="$1"; shift

  if [ ! -e "$plist" ]; then
    printf 'No plist file found at %s\n' "$plist" 1>&2
    return 1
  fi

  "$plb" -c "$query" "$plist"
}

__plist_ensure_value() {
  local plist attr_tree desired_value value_datatype usage
  usage=<<EOF
USAGE:   __plist_ensure_value <plist> <attr-tree> <desired-value> <value-datatype>
EOF

  if [ ! $# -gt 3 ]; then
    printf '%s\n' "$usage" 1>&2
    return 1
  fi

  plist="$1"; shift
  attr_tree="$1"; shift
  desired_value="$1"; shift
  value_datatype="$1"; shift

  if ! (__plist_exec "$plist" "Print ${attr_tree}" &>/dev/null); then
    # Needs to be created
    __plist_exec "$plist" "Add ${attr_tree} ${value_datatype} ${desired_value}" &>/dev/null
  elif ! (__plist_exec "$plist" "Print ${attr_tree}" | grep -qFe "$desired_value"); then
    case "$value_datatype" in
      'dict'|'array')
        # skip
        ;;
      *)
        __plist_exec "$plist" "Set ${attr_tree} '${desired_value}'" &>/dev/null
        ;;
    esac
    # Needs to be changed
  else
    __debug "PList: '${attr_tree}' already exists as type '${value_datatype}' with value '${desired_value}'"
  fi
}

__message() {
  local msg
  msg=$1; shift

  printf '>>  %s\n' "$msg"
}

__post_message() {
  __message "$@" >> /tmp/dotfiles-install-messages
}

__global_preferences() {
  local plist
  plist='.GlobalPreferences.plist'
  if __plist_exec "$plist" 'Print :' &>/dev/null; then
    __message 'Keyboard: MacOS observes readline key bindings in the terminal'
    __plist_ensure_value "$plist" ':AppleKeyboardUIMode' '2' 'integer'
  fi
}

__ensure_darkmode() {
  if command -v dark-mode &>/dev/null; then
    __message 'MacOS: Dark mode enabled'
    command dark-mode on
  else
    __error 'MacOS: Requires `dark-mode` package to set the system UI color scheme'
  fi
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'MacOS Customizations'
  printf '%s\n' '-------------------------------------------------------'

  __ensure_darkmode
  __global_preferences

  if ! command -v gpg2 1>/dev/null 2>/dev/null; then
    sudo ln -vfs /usr/local/bin/gpg /usr/local/bin/gpg2
  fi
fi
