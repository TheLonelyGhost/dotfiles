#!/usr/bin/env bash
set -euo pipefail

__message() {
  local msg
  msg=$1; shift

  printf '>>  %s\n' "$msg"
}

__error() {
  __message "$*" >&2
}

__fatal() {
  __error "$*"
  exit 1
}

__md5_generate() {
  local file=$1
  openssl md5 "$file" | sed -e 's/MD5(.*)= //g'
}
__md5_verify() {
  local file=$1
  local checksumfile=${2:-"${file}.md5"}
  #echo "Verifying ${file} with ${checksumfile}"

  if diff -q <(__md5_generate "$file") <(cat "$checksumfile") &>/dev/null; then
    return 0
  else
    return 1
  fi
}
__verify_base_and_local_md5() {
  __md5_verify "$1" && ([ ! -e "$1".local ] || __md5_verify "$1".local)
}
__generate_base_and_local_md5() {
  if [ -e "$1" ]; then
    __md5_generate "$1" > "$1".md5
  fi
  if [ -e "$1".local ]; then
    __md5_generate "$1".local > "$1".local.md5
  fi
}

__ensure_plugin_manager() {
  if [ ! -e "$HOME"/.config/nvim/autoload/plug.vim ]; then
    printf '>>  NeoVim plugin manager is being installed... '
    command curl -fLo "$HOME"/.config/nvim/autoload/plug.vim --create-dirs \
      https://github.com/junegunn/vim-plug/raw/master/plug.vim
  else
    printf '>>  NeoVim plugin manager is being updated... '
    command nvim +'PlugUpgrade' +'qall' </dev/null 1>/dev/null 2>/dev/null
  fi
  printf 'Done.\n'
}

__install_plugins() {
  local nvim_bundle_config
  nvim_bundle_config="${HOME}/.config/nvim/bundles.vim"

  if [ ! -e "${nvim_bundle_config}" ]; then
    return 0
  fi

  if ! __verify_base_and_local_md5 "${nvim_bundle_config}"; then
    printf '>>  NeoVim bundles are being installed... '
    if command nvim -u "${nvim_bundle_config}" +'PlugInstall' +'qall' </dev/null &>/dev/null; then
      printf 'Done\n'
      __generate_base_and_local_md5 "${nvim_bundle_config}"
    else
      printf 'ERROR\n'
      __error "Encountered an error when running \`nvim +PlugInstall\`"
    fi
  fi
}

__update_plugins() {
  local nvim_bundle_config
  nvim_bundle_config="${HOME}/.config/nvim/bundles.vim"

  if [ ! -e "${nvim_bundle_config}" ]; then
    return 0
  fi

  if [ -e "${HOME}/.local/share/nvim/plugged/vim-go/.git" ]; then
    printf ">>  NeoVim's finicky bundles are being updated... "
    # Special steps because vim-go is finicky, but oh-so-sweet once installed
    pushd "${HOME}" 1>/dev/null 2>/dev/null
    if ! command nvim -u "${nvim_bundle_config}" +'PlugUpdate vim-go' +'qall' </dev/null 1>/dev/null 2>/dev/null; then
      printf 'ERROR\n'
      __error "Encountered an error when running \`nvim +PlugUpdate vim-go'"
    else
      printf 'Done\n'
    fi
    popd 1>/dev/null 2>/dev/null
  fi
  printf '>>  NeoVim bundles are being updated... '
  if command nvim -u "${nvim_bundle_config}" +'PlugUpdate' +'qall' </dev/null 1>/dev/null 2>/dev/null; then
    printf 'Done\n'
  else
    printf 'ERROR\n'
    __error "Encountered an error when running \`nvim +PlugUpdate'"
  fi
}

__update_docs() {
  printf '>>  NeoVim plugin help docs are being updated... '
  if [ ! -e "${HOME}/.config/nvim/doc/plug.txt" ]; then
    command curl -fLo "${HOME}/.config/nvim/doc/plug.txt" --create-dirs \
      https://github.com/junegunn/vim-plug/raw/master/doc/plug.txt 1>/dev/null 2>/dev/null
  fi
  if [ -e "${HOME}/.config/nvim/doc" ]; then
    command nvim +"helptags '${HOME}/.config/nvim/doc'" +'qall' </dev/null 1>/dev/null 2>/dev/null
  fi
  command nvim +'call plug#helptags()' +'qall' </dev/null 1>/dev/null 2>/dev/null
  printf 'Done.\n'
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]] && command -v nvim 1>/dev/null 2>/dev/null; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'NeoVim plugins'
  printf '%s\n' '-------------------------------------------------------'

  __ensure_plugin_manager
  __install_plugins
  __update_plugins
  __update_docs
fi
