#!/usr/bin/env bash
set -euo pipefail

HOOK_DIR="${0%/*}/../"
source "${HOOK_DIR}/lib/base.sh"

version_compare_py="$(cat "${HOOK_DIR}/lib/version_compare.py")"


should-install() {
  local current_version desired_version keepassxc

  if is_mac && [ -x "/Applications/KeePassXC.app/Contents/MacOS/keepassxc-cli" ]; then
    keepassxc="/Applications/KeePassXC.app/Contents/MacOS/keepassxc-cli"
  elif is_mac && [ -x "${HOME}/Applications/KeePassXC.app/Contents/MacOS/keepassxc-cli" ]; then
    keepassxc="${HOME}/Applications/KeePassXC.app/Contents/MacOS/keepassxc-cli"
  elif command -v keepassxc-cli &>/dev/null; then
    keepassxc="$(command -v 'keepassxc-cli')"
  elif command -v keepassxc &>/dev/null; then
    keepassxc="$(command -v 'keepassxc')"
  else
    return 0
  fi

  desired_version="$1"
  current_version="$("$keepassxc" --version | awk '{ print($2); exit }')"
  if [ -z "${current_version:-}" ]; then
    current_version="$("$keepassxc" --version | awk '{ print($1); exit }')"
  fi

  case "$(python -c "$version_compare_py" -- "$current_version" "$desired_version" &>/dev/null && echo $? || echo $?)" in
    0)
      __message "Desired version ('$desired_version') is already installed"
      return 1
      ;;
    5)
      __message "Desired version ('$desired_version') is higher than current version ('$current_version')"
      # defined as "needs an upgrade"
      return 0
      ;;
    8)
      __message "Desired version ('$desired_version') is older than current version ('$current_version')"
      # defined as "upgraded past the version wanted"
      return 1
      ;;
    *)
      __fatal "Some kind of error occurred..."
      # some other error occurred
      return 2
      ;;
  esac
}

install-keepassxc-mac() {
  local releases tag pkg_url tmpdir

  tmpdir="$(mktemp -d keepassxc.XXXXXXXXXXXXXX)"
  trap -- "if [ -e '$tmpdir' ]; then rm -rf '$tmpdir'; fi" EXIT
  pushd "$tmpdir" &>/dev/null

  releases="$1"
  tag="$(printf '%s\n' "$releases" | awk '{ print($1); exit }')"
  pkg_url="$(printf '%s\n' "$releases" | awk 'match($2, /\.dmg$/) { print($3); exit }')"

  if [ -z "${pkg_url:-}" ]; then
    __fatal 'Unable to find suitable package for MacOS. Will not install KeePassXC'
  fi

  __message 'Downloading DMG'
  curl -SsLo ./KeePassXC.dmg "$pkg_url"

  __message 'Mounting downloaded dmg to /Volumes/KeePassXC'
  yes | /usr/bin/hdiutil attach ./KeePassXC.dmg -nobrowse -mountpoint /Volumes/KeePassXC || true
  if [ ! -e /Volumes/KeePassXC ]; then
    __fatal 'Unable to mount DMG'
  fi
  trap -- "if [ -e /Volumes/KeePassXC ]; then /usr/bin/hdiutil detach /Volumes/KeePassXC; fi; if [ -e '$tmpdir' ]; then rm -rf '$tmpdir'; fi" EXIT

  __message 'Copying KeePassXC.app to ~/Applications'
  if [ -e "${HOME}/Applications/KeePassXC.app" ]; then
    rm -rf "${HOME}/Applications/KeePassXC.app"
  else
    mkdir -p "${HOME}/Applications"
  fi
  rsync -az /Volumes/KeePassXC/KeePassXC.app "${HOME}/Applications/"

  mkdir -p "${HOME}/.local/bin"
  __message "Adding keepassxc to the PATH"
  ln -fs "${HOME}/Applications/KeePassXC.app/Contents/MacOS/keepassxc-cli" "${HOME}/.local/bin/keepassxc"

  __message 'Cleaning up after installation'
  /usr/bin/hdiutil detach /Volumes/KeePassXC

  popd &>/dev/null
}

install-keepassxc-linux() {
  local releases tag pkg_url tmpdir

  tmpdir="$(mktemp -d /tmp/keepassxc.XXXXXXXX)"
  trap -- "if [ -e '$tmpdir' ]; then rm -rf '$tmpdir'; fi" EXIT
  pushd "$tmpdir" &>/dev/null

  releases="$1"
  tag="$(printf '%s\n' "$releases" | awk '{ print($1); exit }')"

  if [ "$(uname -m)" = 'x86_64' ]; then
    # The only supported platform, at this time
    pkg_url="$(printf '%s\n' "$releases" | awk 'match($2, /x86_64\.AppImage$/) { print($3) }')"
  fi

  if [ -z "${pkg_url:-}" ]; then
    __fatal 'Unable to find suitable package for Ubuntu. Will not install alacritty'
  fi

  __message 'Downloading AppImage'
  curl -SsLo "${tmpdir}/keepassxc" "$pkg_url"
  chmod +x "${tmpdir}/keepassxc"
  mv "${tmpdir}/keepassxc" "${HOME}/.local/bin/keepassxc"

  if [ ! -e '/usr/share/mime/application/keepassxc.xml' ]; then
    __message 'Setting MIME definition for KeePass 2 files (*.kdbx)'
    curl -SsLo './keepassxc.xml' \
      "https://raw.githubusercontent.com/keepassxreboot/keepassxc/${tag}/share/linux/keepassxc.xml"
    sudo mkdir -p /usr/share/mime/application
    sudo mv ./keepassxc.xml /usr/share/mime/application/keepassxc.xml
    sudo chown root:root -R /usr/share/mime/application
    sudo update-mime-database /usr/share/mime || true
  fi

  # Install current version's `.desktop` file
  __message "Updating KeePassXC's \`*.desktop' file"

  # Install only the proper icon
  curl -SsLo ./keepassxc.svg \
    "https://raw.githubusercontent.com/keepassxreboot/keepassxc/${tag}/share/icons/application/scalable/apps/keepassxc.svg"

  if ! diff -q <(cat ./keepassxc.svg) <(cat "${HOME}/.local/share/icons/keepassxc.svg" 2>/dev/null || true) &>/dev/null; then
    sudo find /usr/share/icons -type f -name 'keepassxc.*' -delete
    find "${HOME}/.local/share/icons" -type f -name 'keepassxc.*' -delete
    mv ./keepassxc.svg "${HOME}/.local/share/icons/keepassxc.svg"
  fi

  # Install desktop entry
  curl -SsLo ./keepassxc.desktop \
    "https://raw.githubusercontent.com/keepassxreboot/keepassxc/${tag}/share/linux/org.keepassxc.KeePassXC.desktop"

  # Patching with full path to KeePassXC
  sed -i'.bak' 's|Exec=keepassxc|Exec='"${HOME}"'/.local/bin/keepassxc|g;s|TryExec=keepassxc|TryExec='"${HOME}"'/.local/bin/keepassxc|g' ./keepassxc.desktop

  # Only install it if there's a difference (saves us an `updatedb` call)
  if ! diff -q <(cat ./keepassxc.desktop) <(cat "${HOME}/.local/share/applications/keepassxc.desktop" 2>/dev/null || true) &>/dev/null; then
    mv ./keepassxc.desktop "${HOME}/.local/share/applications/keepassxc.desktop"
  fi

  popd &>/dev/null
}

install-keepassxc() {
  local releases desired_version
  releases="$1"
  desired_version="$(printf '%s\n' "$releases" | awk '{ gsub(/^v/,"",$1); print($1); exit }')"

  if ! should-install "$desired_version"; then
    return 0
  fi

  if is_mac; then
    install-keepassxc-mac "$releases"
  elif is_linux && ! command -v pacman &>/dev/null; then
    install-keepassxc-linux "$releases"
  else
    __fatal 'Unsupported platform detected. Will not install keepassxc'
  fi
}


if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'KeePassXC Password Safe'
  printf '%s\n' '-------------------------------------------------------'

  gh_releases="$(__get_cmd 'gh-releases')"
  if [ -z "${GITHUB_USER:-}" ] || [ -z "${GITHUB_TOKEN:-}" ]; then
    __fatal 'Missing github credentials in the environment. Skipping installation of KeePassXC'
  fi

  install-keepassxc "$("$gh_releases" --pattern '^\d+\.\d+\.\d+' --latest keepassxreboot/keepassxc)"
fi
