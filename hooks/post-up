#!/bin/bash

npm_packages_dir=${NPM_PACKAGES:-"${HOME}/.npm-packages"}

touch "${HOME}/.psqlrc.local"
[ ! -d $npm_packages_dir ] && mkdir "${npm_packages_dir}" || true

HOOK_DIR=$(dirname "$(readlink -f "$0")")

function __md5_generate() {
  local file=$1
  ( md5sum <"$file"; test $? = 127 && md5 <"$file" ) | cut -d' ' -f1
}
function __md5_verify() {
  local file=$1
  local checksumfile=${2:-"${file}.md5"}
  #echo "Verifying ${file} with ${checksumfile}"

  if [ $(__md5_generate "$file") = $(cat "$checksumfile") ]; then
    return 0
  else
    return 1
  fi
}
function __verify_or_source() {
  local file="$1"
  local checksumfile="${file}.md5"

  if [ -f "$checksumfile" ] && __md5_verify "$file" "$checksumfile"; then
    return 0
  fi

  source "$file"

  __md5_generate "$file" > "$checksumfile"
}
function __install_chruby() {
  local version=${1:-"0.3.9"}
  local previous_dir=$(pwd)
  local tmpdir=$(mktemp -d -t "chruby-install-XXXXXXXXXXXXXXXXX")
  local download="${tmpdir}/chruby-${version}.tar.gz"
  local signature="${tmpdir}/chruby-${version}.tar.gz.asc"
  local pubkey="${tmpdir}/postmodern.asc"
  local extract_dir="${tmpdir}/chruby-latest"

  echo "Downloading Chruby..."
  curl -LSso "$download" "https://github.com/postmodern/chruby/archive/v${version}.tar.gz"

  if command -v gpg > /dev/null; then
    if !(gpg --fingerprint '0xB9515E77' &>/dev/null); then
      echo "Downloading PGP public key for the author of Chruby..."
      curl -LSso "$pubkey" "https://github.com/postmodern/postmodern.github.io/raw/master/postmodern.asc"
      echo "Importing GPG public key for the author of Chruby..."
      gpg --import "$pubkey"
    fi

    echo "Verifying signature on downloaded copy of Chruby..."
    curl -LSso "$signature" "https://github.com/postmodern/chruby/raw/master/pkg/chruby-${version}.tar.gz.asc"

    if gpg --verify "$signature" "$download" 2>&1 >/dev/null; then
      echo "Verified!"
    else
      echo "Signature mismatch for $(basename "$download")" >&2
      return 1
    fi
  fi

  echo "Extracting downloaded package..."
  [ -d $extract_dir ] && \
    rm -rf "$extract_dir" && mkdir -p "$extract_dir" \
    || \
    mkdir -p "$extract_dir"

  tar xzf "$download" -C "$extract_dir" --strip-components=1
  cd "$extract_dir"

  echo "Installing Chruby..."
  sudo make install
  echo "Initializing Chruby for immediate use..."
  source /usr/local/share/chruby/chruby.sh

  echo "Cleaning up..."
  cd "$previous_dir"
  rm -rf "$tmpdir"

  echo "Done"
}

function __install_ruby_install() {
  local version=${1:-"0.6.0"}
  local previous_dir=$(pwd)
  local tmpdir=$(mktemp -d -t "ruby-install.XXXXXXXXXXXXXXXXX")
  local download="${tmpdir}/ruby-install-${version}.tar.gz"
  local signature="${tmpdir}/ruby-install-${version}.tar.gz.asc"
  local pubkey="${tmpdir}/postmodern.asc"
  local extract_dir="${tmpdir}/ruby-install-latest"

  echo "Downloading ruby-install..."
  curl -LSso "$download" "https://github.com/postmodern/ruby-install/archive/v${version}.tar.gz"

  if command -v gpg > /dev/null; then
    if !(gpg --fingerprint '0xB9515E77' 2>&1 >/dev/null); then
      echo "Importing GPG public key for the author of ruby-install..."
      curl -LSso "$pubkey" "https://github.com/postmodern/postmodern.github.io/raw/master/postmodern.asc"
      gpg --import "$pubkey"
    fi
    echo "Verifying signature on downloaded copy of ruby-install..."
    curl -LSso "$signature" "https://github.com/postmodern/ruby-install/raw/master/pkg/ruby-install-${version}.tar.gz.asc"

    if gpg --verify "$signature" "$download" 2>&1 >/dev/null; then
      echo "Verified!"
    else
      echo "Signature mismatch for $(basename "$download")" >&2
      return 1
    fi
  fi

  echo "Extracting downloaded package..."
  [ -d $extract_dir ] && \
    rm -rf "$extract_dir" && mkdir -p "$extract_dir" \
    || \
    mkdir -p "$extract_dir"

  tar xzf "$download" -C "$extract_dir" --strip-components=1
  cd "$extract_dir"

  echo "Installing ruby-install..."
  sudo make install
  echo "Initializing ruby-install for immediate use..."
  if [ ! -f "$HOME/.ruby-version" ]; then
    ruby-install --latest ruby
    echo "$(ls -1 "$HOME/.rubies" | grep 'ruby-' | tail -n 1)" > "$HOME/.ruby-version"
  elif [ -z $(ls -1 "$HOME/.rubies" | grep -e "$(cat "$HOME/.ruby-version")") ]; then
    local ruby_version=$(cat "$HOME/.ruby-version")
    [ -z $(ls -1 "$HOME/.rubies" | grep -v '^$' | tail -n 1 | grep "$ruby_version") ]
    ruby-install $(sed -e 's/^\([^-]\+\)-/\1 /g' <"$HOME/.ruby-version")
  else
    echo "Ruby ($(cat "$HOME/.ruby-version")) is already installed"
  fi

  echo "Cleaning up..."
  cd "$previous_dir"
  rm -rf "$tmpdir"

  echo "Done"
}



if [ -t 2 ]; then
  fg_red=$'\e[31m'
  fg_bold_white=$'\e[1;37m'
  reset_color=$'\e[m'
else
  fg_red=""
  fg_bold_white=""
  reset_color=""
fi

# Install OS-specific packages
case "$(uname -a 2>/dev/null)" in
  *GNU/Linux)
    if [ ! -z "$(command -v apt-get 2>/dev/null)" ]; then
      __verify_or_source "${HOOK_DIR}/packages/apt"
    elif [ ! -z "$(command -v yum 2>/dev/null)" ]; then
      __verify_or_source "${HOOK_DIR}/packages/yum"
    else
      cat <<MSG >&2
${fg_red}Warning:${reset_color} your operating system is not recognized.
Unable to automatically install default packages required for these
configurations.
MSG
    fi
    ;;
  Darwin*)
    if [ ! -z "$(command -v brew 2>/dev/null)" ]; then
      __verify_or_source "${HOOK_DIR}/packages/brew"
    else
      cat <<MSG >&2
${fg_red}Warning:${reset_color} you do not appear to have homebrew
installed and/or configured properly. Please install homebrew, if you
haven't already, and then run:
  ${fg_bold_white}brew doctor${reset_color}

Once finished with these steps, rerun ${fg_bold_white}rcup${reset_color}

MSG
    fi
    ;;
  *)
    cat <<MSG >&2
${fg_red}Warning:${reset_color} your operating system is not recognized.
Unable to automatically install default packages required for these
configurations.

MSG
    ;;
esac

[ -e /usr/local/share/chruby ] || \
  __install_chruby
type ruby-install &>/dev/null || \
  __install_ruby_install

if command -v gem > /dev/null; then
  # TODO: Additional rubygems configurations?

  [ -f "${HOOK_DIR}/packages/rubygems" ] && \
    __verify_or_source "${HOOK_DIR}/packages/rubygems" \
    || true
fi

if command -v npm > /dev/null; then
  npm config set prefix "${npm_packages_dir}"

  [ -f "${HOOK_DIR}/packages/npm" ] && \
    __verify_or_source "${HOOK_DIR}/packages/npm" \
    || true
fi

# Install Vim-Plug and any plugins it handles
if [ ! -e "$HOME"/.vim/autoload/plug.vim ]; then
  curl -fLo "$HOME"/.vim/autoload/plug.vim --create-dirs \
      https://github.com/junegunn/vim-plug/raw/master/plug.vim
fi
vim -u "$HOME"/.vimrc.bundles +PlugInstall +'PlugClean!' +qall

# detect old OS X broken /etc/zshenv and suggest rename
if grep -qw path_helper /etc/zshenv 2>/dev/null; then
  if [ -t 2 ]; then
    fg_red=$'\e[31m'
    fg_bold_white=$'\e[1;37m'
    reset_color=$'\e[m'
  else
    fg_red=""
    fg_bold_white=""
    reset_color=""
  fi

  # resolve BASH_SOURCE to absolute path
  bash_source="$BASH_SOURCE"
  if [[ $bash_source == */* ]]; then
    pushd "${bash_source%/*}" >/dev/null
    bash_source="${PWD}/${bash_source##*/}"
    popd >/dev/null
  fi

  cat <<MSG >&2
${fg_red}Warning:${reset_color} \`/etc/zshenv' configuration file on your system may cause unexpected
PATH changes on subsequent invocations of the zsh shell. The solution is to
rename the file to \`zprofile':
  ${fg_bold_white}sudo mv /etc/{zshenv,zprofile}${reset_color}

(called from ${bash_source}:${LINENO})

MSG
fi
