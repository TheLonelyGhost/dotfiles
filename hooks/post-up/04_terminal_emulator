#!/usr/bin/env bash
set -euo pipefail

HOOK_DIR="${0%/*}/../"
source "${HOOK_DIR}/lib/base.sh"

version_compare_py="$(cat "${HOOK_DIR}/lib/version_compare.py")"

should-install() {
  local current_version desired_version alacritty

  if is_mac && [ -x "${HOME}/Applications/Alacritty.app/Contents/MacOS/alacritty" ]; then
    alacritty="${HOME}/Applications/Alacritty.app/Contents/MacOS/alacritty"
  elif command -v 'alacritty' &>/dev/null; then
    alacritty="$(command -v alacritty)"
  else
    return 0
  fi

  desired_version="$1"
  current_version=$("$alacritty" --version | awk '{ print($2); exit }')

  case "$(python -c "$version_compare_py" -- "$current_version" "$desired_version" &>/dev/null && echo $? || echo $?)" in
    0)
      # Same version
      return 1
      ;;
    5)
      # defined as "needs an upgrade"
      return 0
      ;;
    8)
      # defined as "upgraded past the version wanted"
      return 1
      ;;
    *)
      # some other error occurred
      return 2
      ;;
  esac
}

install-alacritty-mac() {
  local releases tag pkg_url man_url tmpdir

  tmpdir="$(mktemp -d alacritty.XXXXXXXX)"
  trap -- "if [ -e '$tmpdir' ]; then rm -rf '$tmpdir'; fi" EXIT
  pushd "$tmpdir" &>/dev/null

  releases="$1"
  tag="$(printf '%s\n' "$releases" | awk '{ print($1); exit }')"
  pkg_url="$(printf '%s\n' "$releases" | awk '/\.dmg/ { print($3) }')"
  man_url="$(printf '%s\n' "$releases" | awk '/\.1\.gz/ { print($3) }')"

  if [ -z "${pkg_url:-}" ]; then
    __fatal 'Unable to find suitable package for MacOS. Will not install alacritty'
  fi

  __message 'Downloading DMG'
  curl -SsLo ./alacritty.dmg "$pkg_url"

  __message 'Mounting downloaded dmg to /Volumes/Alacritty'
  yes | /usr/bin/hdiutil attach ./alacritty.dmg -nobrowse -mountpoint /Volumes/Alacritty || true

  if [ ! -e /Volumes/Alacritty ]; then
    __fatal 'Unable to mount DMG'
  fi
  trap -- "if [ -e /Volumes/Alacritty ]; then /usr/bin/hdiutil detach /Volumes/Alacritty; fi; if [ -e '$tmpdir' ]; then rm -rf '$tmpdir'; fi" EXIT

  __message 'Copying Alacritty.app to ~/Applications'
  if [ -e "${HOME}/Applications/Alacritty.app" ]; then
    rm -f "${HOME}/Applications/Alacritty.app"
  else
    mkdir -p "${HOME}/Applications"
  fi
  rsync -avz /Volumes/Alacritty/Alacritty.app "${HOME}/Applications/"

  mkdir -p "${HOME}/.local/bin"
  __message "Adding alacritty to the PATH"
  ln -fs "${HOME}/Applications/Alacritty.app/Contents/MacOS/alacritty" "${HOME}/.local/bin/alacritty"

  __message 'Cleaning up after installation'
  /usr/bin/hdiutil detach /Volumes/Alacritty

  # Install current version's man docs
  if [ -n "$man_url" ]; then
    mkdir -p "${HOME}/.local/share/man/man1"
    __message "Updating Alacritty's man pages"
    curl -SsLo "${HOME}/.local/share/man/man1/alacritty.1.gz" "$man_url"
  else
    __error 'No man pages found in the release. Continuing without installing them...'
  fi

  # Install a default font
  if [ ! -e "${HOME}/Library/Fonts/bitstream-vera-sans-mono.ttf" ]; then
    mkdir -p "${HOME}/Library/Fonts"
    __message "Installing default font: Bitstream Vera Sans Mono"
    curl -SsLo "${HOME}/Library/Fonts/bitstream-vera-sans-mono.ttf" https://profont.net/download/1609869.html
  else
    __message "Found local copy of font: Bitstream Vera Sans Mono"
  fi

  # Update with current version's terminfo
  __message "Updating Alacritty's terminfo"
  curl -SsLo ./alacritty.terminfo "https://raw.githubusercontent.com/jwilm/alacritty/${tag}/alacritty.info"
  tic -xe alacritty,alacritty-direct ./alacritty.terminfo 1>/dev/null

  # Update with current version's completions
  mkdir -p "${HOME}/.zsh/completion"
  __message "Updating Alacritty's shell completions (zsh)"
  curl -SsLo "${HOME}/.zsh/completion/_alacritty" \
    "https://raw.githubusercontent.com/jwilm/alacritty/${tag}/alacritty-completions.zsh"

  popd &>/dev/null
}

install-alacritty-linux() {
  local releases tag pkg_url man_url tmpdir

  tmpdir="$(mktemp -d alacritty.XXXXXXXX)"
  trap -- "if [ -e '$tmpdir' ]; then rm -rf '$tmpdir'; fi" EXIT
  pushd "$tmpdir" &>/dev/null

  releases="$1"
  tag="$(printf '%s\n' "$releases" | awk '{ print($1); exit }')"

  if [ "$(uname -m)" = 'x86_64' ]; then
    pkg_url="$(printf '%s\n' "$releases" | awk '/x86_64.*\.tar\.gz/ { print($3) }')"
  else
    pkg_url="$(printf '%s\n' "$releases" | awk '/i386.*\.tar\.gz/ { print($3) }')"
  fi
  man_url="$(printf '%s\n' "$releases" | awk '/\.1\.gz/ { print($3) }')"

  if [ -z "${pkg_url:-}" ]; then
    __fatal 'Unable to find suitable package for Ubuntu. Will not install alacritty'
  fi
  mkdir -p "${HOME}/.local/bin"

  # Install alacritty binary
  __message 'Downloading tarball'
  curl -SsLo - "$pkg_url" | tar -xzC "${HOME}/.local/bin" &>/dev/null
  chmod +x "${HOME}/.local/bin/alacritty"

  # Install current version's man docs
  if [ -n "$man_url" ]; then
    mkdir -p "${HOME}/.local/share/man/man1"
    __message "Updating Alacritty's man pages"
    curl -SsLo "${HOME}/.local/share/man/man1/alacritty.1.gz" "$man_url"
  else
    __error 'No man pages found in the release. Continuing without installing them...'
  fi

  # Install current version's `.desktop` file
  mkdir -p "${HOME}/.local/share/applications"
  __message "Updating Alacritty's \`*.desktop' file"
  curl -SsLo "${HOME}/.local/share/applications/alacritty.desktop" \
    "https://raw.githubusercontent.com/jwilm/alacritty/${tag}/alacritty.desktop"

  # Update with current version's terminfo
  __message "Updating Alacritty's terminfo"
  curl -SsLo ./alacritty.terminfo "https://raw.githubusercontent.com/jwilm/alacritty/${tag}/alacritty.info"
  tic -xe alacritty,alacritty-direct <() 1>/dev/null

  # Update with current version's completions
  mkdir -p "${HOME}/.zsh/completion"
  __message "Updating Alacritty's shell completions (zsh)"
  curl -SsLo "${HOME}/.zsh/completion/_alacritty" \
    "https://raw.githubusercontent.com/jwilm/alacritty/${tag}/alacritty-completions.zsh"

  __message "Updating desktop database cache"
  sudo update-desktop-database &>/dev/null

  popd &>/dev/null
}

install-alacritty() {
  local releases desired_version
  releases="$1"
  desired_version="$(printf '%s\n' "$releases" | awk '{ gsub(/^v/,"",$1); print($1); exit }')"

  if ! should-install "$desired_version"; then
    __message 'Already up-to-date!'
    return 0
  fi

  if is_mac; then
    install-alacritty-mac "$releases"
  elif is_linux; then
    install-alacritty-linux "$releases"
  else
    __fatal 'Unsupported platform detected. Will not install alacritty'
  fi
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'Terminal Emulator (alacritty)'
  printf '%s\n' '-------------------------------------------------------'

  gh_releases="$(__get_cmd 'gh-releases')"

  if [ -z "${GITHUB_USER:-}" ] || [ -z "${GITHUB_TOKEN:-}" ]; then
    __fatal 'Missing github credentials in the environment. Skipping installation of alacritty'
  fi

  install-alacritty "$("$gh_releases" --pattern '^v\d+\.\d+\.\d+' --latest jwilm/alacritty)"
fi
