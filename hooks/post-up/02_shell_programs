#!/usr/bin/env bash
set -euo pipefail

USER_AGENT="TheLonelyGhost's dotfiles"
declare -a TMP_DIRS=()

__cleanup_tmp_dirs() {
  if [ "${#TMP_DIRS[@]}" -eq 0 ]; then return 0; fi
  # __message "[CLEANUP] Removing temporary files"

  for dir in "${TMP_DIRS[@]}"; do
    if [ -e "$dir" ]; then
      rm -rf "$dir"
    fi
  done
}

__message() {
  printf '>>  %s\n' "$*"
}

__error() {
  __message "$*" >&2
}

__fatal() {
  __error "$*"
  exit 1
}

trap '__cleanup_tmp_dirs' QUIT EXIT


__latest_release() {
  local repo
  repo="$1"; shift
  command curl --user-agent "${USER_AGENT}" -I "${repo}/releases/latest" -s | \
    command grep 'Location: ' | \
    command head -n1 | \
    command perl -nle 'm/^.*releases\/tag\/(v?[A-Za-z0-9\.-]+).*$/; print $1'
}

__version_compare() {
  # print 1 : $1 is a higher version than $2
  # print 2 : $2 is a higher version than $1
  # print 0 : $1 and $2 are the same or equivalent versions
	local first second
	first=$(echo "${1}" | perl -pe 's/-.*$//g')
	second=$(echo "${2}" | perl -pe 's/-.*$//g')

  cat <<EOH | command ruby -
require 'rubygems' rescue nil

current = Gem::Version.new('${first}')
remote = Gem::Version.new('${second}')

v = current <=> remote
if v.nil?
  puts 999
elsif v == -1
  puts 2
else
  puts v
end
EOH
}

__update_testssl() {
  local repo project
  repo='https://github.com/drwetter/testssl.sh'
  project='testssl.sh'

  local version archive archive_url
  if [ $# -eq 0 ]; then  # Latest, by default
    version=$(__latest_release "$repo")
  elif [ "$1" = "latest" ]; then  # 'latest' keyword
    version=$(__latest_release "$repo")
  else
    version="$1"
  fi
  archive_url="$repo"/archive/"${version}".tar.gz

  local current_version
  if command -v test-ssl 1>/dev/null 2>/dev/null; then
    # Check version of test-ssl
    current_version=$(command test-ssl --version 2>/dev/null | perl -pe 's/\x1b\[[0-9;]*[a-zA-Z]//g' | grep -Fe 'test-ssl' | perl -nle 'm/^.+test-ssl\s+(v?[A-Za-z0-9\.-]+)\s.+$/; print $1' || echo '0.0.0')
  else
    current_version='0.0.0'
  fi

  if [ "$(__version_compare "${current_version##v}" "${version##v}")" -eq "2" ]; then
    __message "test-ssl: ${current_version##v} -> ${version##v}"
  else
		__message "test-ssl: up to date!"
    return 0
  fi

  archive=$(mktemp -t "${project}_${version}-XXXXXXXXXXXXXXX.tar.gz")
  TMP_DIRS+=("$archive")  # For later cleanup

  printf '>>  Downloading %s %s ... ' "${project}" "${version}"
  command curl -LSso "$archive" "$archive_url"
  printf '%s\n' 'done!'

  __message "Installing ${project} ${version}"
  if [ ! -e /opt/testssl ]; then
    sudo mkdir -p /opt/testssl
  fi
  sudo ls &>/dev/null  # So we can separate out the sudo prompt from the insallation progress messages
  printf '>>  Extracting archive ... '
  sudo tar -xzf "$archive" -C /opt/testssl --strip-components=1
  printf '%s\n' 'done!'
}

__ensure_symlink() {
  command ln -fs "$2" "$1"
}


if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  printf '%s\n' '-------------------------------------------------------'
  __message 'Shell applications'
  printf '%s\n' '-------------------------------------------------------'

  __update_testssl 'latest'
  mkdir -p "${HOME}/.bin"
  __ensure_symlink "${HOME}/.bin/test-ssl" '/opt/testssl/testssl.sh'
fi
