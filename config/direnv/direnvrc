# vim: ft=sh

if ! has log_error; then
  # Usage: log_error [<message> ...]
  #
  # Logs an error message. Acts like echo,
  # but wraps output in the standard direnv log format
  # (controlled by $DIRENV_LOG_FORMAT), and directs it
  # to stderr rather than stdout.
  #
  # Example:
  #
  #    log_error "Unable to find specified directory!"
  log_error() {
    local color_normal
    local color_error
    color_normal=$(tput sgr0)
    color_error=$(tput setaf 1)
    if [[ -n $DIRENV_LOG_FORMAT ]]; then
      local msg=$*
      # shellcheck disable=SC2059
      printf "${color_error}${DIRENV_LOG_FORMAT}${color_normal}\n" "$msg" >&2
    fi
  }
fi


use_python() {
  local python_root="${HOME}/.pyenv/versions/$1"
  if [ $# -gt 0 ]; then shift; fi

  load_prefix "${python_root}"
  if [ -x "${python_root}/bin/python3" ]; then
    layout python3 "${python_root}/bin/python3" --no-site-packages "$@"
  else
    layout python "${python_root}/bin/python" --no-site-packages "$@"
  fi
}

layout_virtualenv() {
  local venv_path="$1"
  source "${venv_path}/bin/activate"
}

layout_virtualenvwrapper() {
  local venv_path="${WORKON_HOME}/$1"
  layout_virtualenv "${venv_path}"
}

use_ruby() {
  local version ruby_version
  ruby_version="${1:-}"

  if ! type chruby &>/dev/null; then
    if [ ! -e "/usr/local/share/chruby/chruby.sh" ]; then
      log_error "Please install chruby to use the 'use ruby <version>' feature"
      return 1
    else
      . '/usr/local/share/chruby/chruby.sh'
    fi
  fi

  # If not given in ./.envrc, defer to the ./.ruby-version file
  if { read -r version <"${PWD}/.ruby-version"; } 2>/dev/null || [ -n "$version" ]; then
    if [ -n "$ruby_version" ] && [ "$ruby_version" != "$version" ]; then
      log_error "Ruby version specified in \`.envrc' is different from \`.ruby-version'. Preferring \`.ruby-version'"
    fi
  fi

  if [ -n "$ruby_version" ]; then
    chruby "$ruby_version"
    if [ $? -ne 0 ]; then return $?; fi
  elif [ -n "$version" ]; then
    chruby "$version"
    if [ $? -ne 0 ]; then return $?; fi
  else
    log_error "No ruby version found. Please add a valid ruby version to \`./.ruby-version'"
    return 1
  fi

  if [ -f "Gemfile" ] && has bundle; then
    if [ ! -f "Gemfile.lock" ] || [ ! -d "bin" ]; then
      bundle install --binstubs
      [ $? -eq 0 ] || return $?
    fi
    if [ -d "bin" ]; then
      path_add PATH "$(realpath 'bin')"
    fi
  fi
}

use_chef() {
  # Compliments the chef completion stuff in the bash/zsh configs
  eval "$(chef shell-init "$(basename "$SHELL")" | grep -e '^export ')"
}

# Project-specific vim configurations
use_customized_vim() {
  local extravim="$(find_up .vimrc)"
  if [ -n "$extravim" ]; then
    echo "Adding vim configurations: ${extravim}"
    path_add EXTRA_VIM "$extravim"
  fi
}
